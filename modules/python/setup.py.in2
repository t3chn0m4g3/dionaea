# This file is part of the dionaea honeypot
#
# SPDX-FileCopyrightText: 2009 Paul Baecher & Markus Koetter
# SPDX-FileCopyrightText: 2018-2020 PhiBo (DinoTools)
#
# SPDX-License-Identifier: GPL-2.0-or-later

from setuptools import setup, find_packages, Extension
from setuptools.command.install import install as _install
from setuptools.command.build_ext import build_ext as _build_ext

import os
# from Cython.Distutils import build_ext

# Helper function to get absolute path relative to this file
def get_abs_path(rel_path):
    return os.path.abspath(os.path.join(os.path.dirname(__file__), rel_path))

def get_rel_path(abs_path):
    return os.path.relpath(os.path.join(os.path.dirname(__file__), abs_path))

# Function to process CMake-style paths
def process_cmake_path(path):
    if path.startswith('${CMAKE_CURRENT_SOURCE_DIR}'):
        return get_rel_path(get_abs_path(path))
    return path

class CustomBuildExt(_build_ext):
    def build_extensions(self):
        if '-Wstrict-prototypes' in self.compiler.compiler_so:
            self.compiler.compiler_so.remove('-Wstrict-prototypes')
        super().build_extensions()

class CustomInstall(_install):
    def run(self):
        _install.run(self)


print("=== DEBUG: CMAKE_CURRENT_SOURCE_DIR " + "${CMAKE_CURRENT_SOURCE_DIR}")

# glib
core_cflags = '${GLIB2_CFLAGS};'
core_ldflags = '${GLIB2_LDFLAGS};'

# gmodule
core_cflags += '${GMODULE2_CFLAGS}'
core_ldflags += '${GMODULE2_LDFLAGS}'

core_include_dirs = set()
core_extra_compile_flags = set()
for i in core_cflags.split(';'):
    if i == '':
        continue
    elif i.startswith('-I'):
        core_include_dirs.add(process_cmake_path(i[2:]))
    else:
        core_extra_compile_flags.add(i)

core_libraries = set()
core_library_dirs = set()
core_library_other_flags = set()

for i in core_ldflags.split(';'):
    if i == '':
        continue
    elif i.startswith('-l'):
        core_libraries.add(i[2:])
    elif i.startswith('-L'):
        core_library_dirs.add(process_cmake_path(i[2:]))
    else:
        core_library_other_flags.add(i)

ext_modules = [
    Extension("dionaea.core",
        ['${CMAKE_CURRENT_SOURCE_DIR}/binding.pyx'],
        language="c",
        include_dirs=[
            process_cmake_path('${CMAKE_CURRENT_SOURCE_DIR}/../../include'),
            process_cmake_path('${CMAKE_CURRENT_SOURCE_DIR}/../../')
        ] + list(core_include_dirs),
        extra_compile_args=list(core_extra_compile_flags),
        libraries=list(core_libraries),
        library_dirs=list(core_library_dirs),
        extra_link_args=list(core_library_other_flags),
        undef_macros=[('NDEBUG')],
        define_macros=[('_GNU_SOURCE',None)],
    ),
]

d_packages = find_packages(process_cmake_path('${CMAKE_CURRENT_SOURCE_DIR}'))
print("=== DEBUG: d_packages " + str(d_packages))

d_dir = {'': process_cmake_path('${CMAKE_CURRENT_SOURCE_DIR}')}
print("=== DEBUG: d_dir " + str(d_dir))

setup(
    name='dionaea',
    version="${DIONAEA_VERSION}",
    cmdclass={
        'build_ext': CustomBuildExt,
        'install': CustomInstall,
    },
    ext_modules=ext_modules,
    packages=d_packages,
    package_dir=d_dir
)
